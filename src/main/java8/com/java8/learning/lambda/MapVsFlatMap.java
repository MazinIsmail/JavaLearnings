package com.java8.learning.lambda;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class MapVsFlatMap {

	public static void main(String[] args) {
		mapLearning();
		flatMapLearning();
	}

	// Map
	public static void mapLearning() {
		// Map is a function that takes a function as an argument and applies it to each
		// element of the stream.
		// It transforms each element of the stream into another element.

		// Example: Multiplying All the elements of the list by 3 and returning the
		// updated list.

		// One-to-one mapping occurs in map(). map() is used only for transformation.
		// One-to-one mapping occurs in map(). map() is used only for transformation.
		// One-to-one mapping occurs in map(). map() is used only for transformation.

		ArrayList<String> fruit = new ArrayList<>();
		fruit.add("Apple");
		fruit.add("mango");
		fruit.add("pineapple");
		fruit.add("kiwi");
		System.out.println("List of fruit-" + fruit);

		// lets use map() to convert list of fruit
		List list = fruit.stream().map(s -> s.length()).collect(Collectors.toList());
		System.out.println("List generated by map-" + list);
	}

	// Map
	public static void flatMapLearning() {
		// Can be used where we have to flatten or transform out the string, as we
		// cannot flatten our string using map().

		// One-to-many mapping occurs in flatMap(). flatMap() is used both for
		// transformation and mapping.
		// One-to-many mapping occurs in flatMap(). flatMap() is used both for
		// transformation and mapping.
		// One-to-many mapping occurs in flatMap(). flatMap() is used both for
		// transformation and mapping.

		List<List<Integer>> number = new ArrayList<>();

		// adding the elements to number arraylist
		number.add(Arrays.asList(1, 2));
		number.add(Arrays.asList(3, 4));
		number.add(Arrays.asList(5, 6));
		number.add(Arrays.asList(7, 8));

		System.out.println("List of list-" + number);

		// using flatmap() to flatten this list
		List<Integer> flatList = number.stream().flatMap(list -> list.stream()).collect(Collectors.toList());

		// printing the list
		System.out.println("List generate by flatMap-" + flatList);

	}
}
